docker build -t laradockerman/crypto .
docker images
docker run -p 3000:8280 -d laradockerman/crypto

--docker compose script
docker-compose build
 or COMPOSE_DOCKER_CLI_BUILD=1 DOCKER_BUILDKIT=1 docker-compose build

docker-compose ps
docker-compose up -d

--psql debugg commands
$ rm /usr/local/var/postgres/postmaster.pid
$ brew services restart postgresql


------typeorm
typeorm migration:create -n PostRefactoring
typeorm migration:run //ts-node ./node_modules/typeorm/cli.js migration:run


--Postgres DB
docker exec -it express-typescript_db_1 bash
psql -U postgres


----Redis
docker pull redis
docker run -p 6379:6379 --name redis-sample -d redis
start redis server
launchctl load ~/Library/LaunchAgents/homebrew.mxcl.redis.plist
configure
redis-server /usr/local/etc/redis.conf
to start
brew tap homebrew/services
brew services [start/stop/restart] redis

if these dont work then
alias redisstart='sudo launchctl start io.redis.redis-server'
alias redisstop='sudo launchctl stop io.redis.redis-server'

--Refactor to this
const session = require('express-session');
const RedisStore = require('connect-redis')(session);
const redisClient = require('redis').createClient({ host: getSetting('keyStoreHost') });

//for this purpose, just assume this is an array of customer id's:
// ['customer-A', 'customer-B', etc]
const getCustomers = require('./our-customers');

// a hash table to store references to all of the middlewares we're going to generate
const customerSessionMiddleware = {};

const SessionMiddlewareConfig = {
	secret: 'keyboard-cat',
	resave: true,
	saveUninitialized: true,
	key: 'cookie-name'
};

const RedisStoreConfig = {
	client: redisClient,
	ttl: 60 * 60 //1 hour in seconds
};

const configureMiddleware = (cust, app) =>
	session({
		...SessionMiddlewareConfig,
		store: new RedisStore({
			...RedisStoreConfig,
			prefix: `sessions:${cust.toLowerCase()}:${app}:`
		})
	});

const dynamicSessions = app => {
	//load all session stores up once at startup
	getCustomers().forEach(cust => {
		customerSessionMiddleware[cust] = configureMiddleware(cust, app);
	});

	return function dynamicSessionMiddleware(req, res, next) {
		const customerMiddleware = customerSessionMiddleware[req.CUSTOMER];
		return customerMiddleware(req, res, next);
	};
};

module.exports = dynamicSessions;





